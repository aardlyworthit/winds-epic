<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, January 24, 2018, 8:03 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Aard_Winds_Epic" generated by Plugin Wizard -->

<!--
commentz
-->

<muclient>
<plugin
   name="Aard_Winds_Epic"
   author="Endymion"
   id="4b128e4e3d76f0a2bda4b0ed"
   language="Lua"
   purpose="Winds epic stuff."
   date_written="2018-01-24 20:02:50"
   requires="4.30"
   version="1.0"
   save_state="y"
   >
<description trim="n">
<![CDATA[

]]>
</description>

</plugin>

<triggers>    
  <trigger
   enabled="y"
   match="^(?<player>\w+) steps onto the pedestal\; the pedestal shimmers slightly\.$"
   regexp="y"
   script="player_pedestal"
   sequence="100"
   group="triggers"
  >
  </trigger>
  <trigger
   name="player_says"
   enabled="y"
   match="^(.+ )?(?<player>\w+|You) says? '\s*(?<word>\w+)\s*'$"
   regexp="y"
   script="player_says"
   sequence="100"
   group="triggers"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^Solistar, the Recluse says 'Hrm\. Something is (?<different>different)\.\.\.'$|^A (?<bolt>bolt) of lightning flashes from the heavens and strikes .+ directly in the chest!$|^As you say the final word, a (?<portal>portal) forms inside of the obelisk, allowing you to enter it\.$"
   regexp="y"
   script="say_result"
   sequence="100"
   group="triggers"
  >
  </trigger>A Steward of Time says, "Fair winds to you."
  <trigger
   enabled="n"
   match="^A Steward of Time says, &quot;Fair winds to you.&quot;$"
   regexp="y"
   script="enable_time_catch"
   sequence="100"
   group="triggers"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^.+it will take about (?<hours>\d+):(?<mins>\d+):(?<secs>\d+) hours. That sukz, I know!&quot;$"
   regexp="y"
   sequence="100"
   script="winds_timer"
   name="winds_time_catch"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(\(Group\) .+|\(Spouse\):) '?\>\> Winds of Fate \>\> \[\[\s+(?<cmd>\w.+\w)\s+\]\]'?$"
   regexp="y"
   script="set_cmd"
   sequence="100"
   group="triggers"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^\(Group\) .+: 'Current steps\(copy&amp;paste\): \-\-\>\s+(?<cmd>.+)\s+\<\-\-'$"
   regexp="y"
   script="set_cmd"
   sequence="100"
   group="triggers"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^\(Group\) .+: 'Words Found: (?<done>[\w\s]+)\. Words left for this side: (?<left>[\w\s]+)\.'$"
   regexp="y"
   script="set_cmd_crowley"
   sequence="100"
   group="triggers"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^(Group) .+ \>\> Winds of Fate \>\> side\[(?<side>\d)\] is (?<word>\w+)$"
   regexp="y"
   script="rename_group"
   sequence="100"
   group="triggers"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^Solistar, the Recluse gives A small, tiny pebble to (.+ )?(?<who>\w+)\.$|^(?<you>You) receive A s(?<m>m)all, tiny p(?<e>e)bble from Solistar, the Recluse\.$"
   regexp="y"
   script="got_pebble"
   sequence="100"
   group="triggers"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^You have the following cards stored:$"
   regexp="y"
   script="start_case"
   sequence="100"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?<card>\w+) Fantasy Series Collector's Card$"
   regexp="y"
   script="case_card"
   sequence="100"
   omit_from_output="n"
   group="case"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^Total: (?<tot>\d+)$"
   regexp="y"
   script="total_case"
   sequence="100"
   omit_from_output="n"
   group="case"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\| Id         : (?<case>\d+)\s+\|$"
   regexp="y"
   script="end_case"
   sequence="100"
   omit_from_output="n"
   group="case"
  >
  </trigger>
  
  <trigger
   enabled="n"
   match="^\{winds_dupes\}$"
   regexp="y"
   script="start_dupes"
   sequence="100"
   omit_from_output="n"
   name="start_dupes"
   group="dupes"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\{end_winds_dupes\}$"
   regexp="y"
   script="end_dupes"
   sequence="100"
   omit_from_output="n"
   group="dupes"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?<id>\d+),KMGH,(?<card>(?<name>\w+) Fantasy Series Collector's Card),201,6,0,-1,-1$"
   regexp="y"
   script="dupe_card"
   sequence="100"
   omit_from_output="n"
   group="dupes"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^.+$"
   regexp="y"
   script="dupe_card"
   sequence="101"
   omit_from_output="y"
   group="dupes"
  >
  </trigger>

</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="^winds (?<rslt>x|y) (?<word>\w+)$"
   enabled="y"
   regexp="y"
   script="winds_scratch"
   sequence="1"
  >
  </alias>
  <alias
   match="^(rep|repo|repor|report)sides?$"
   enabled="y"
   regexp="y"
   script="report_sides"
   sequence="1"
  >
  </alias>
  <alias
   match="^winds$"
   enabled="y"
   regexp="y"
   script="report_winds"
   sequence="1"
  >
  </alias>
  <alias
   name="cmd"
   match="^cmd$"
   enabled="n"
   regexp="y"
   script="use_cmd"
   sequence="1"
  >
  </alias>
  <alias
   match="^winds missing$"
   enabled="y"
   regexp="y"
   script="toggle_show_missing"
   sequence="1"
  >
  </alias>
  <alias
   match="^winds (dup|dups|dupes|dupl|dupli|duplic|duplica|duplicat|duplicate|duplicates) (?<chan>[\w ]+)$"
   enabled="y"
   regexp="y"
   script="inventory_dupes"
   sequence="1"
  >
  </alias>

</aliases>

<!--  Script  -->


<script>
<![CDATA[
require "tprint"
require "gmcphelper"
require "serialize"
require "commas"
dofile(GetInfo(56)..GetInfo(60).."aardwolf_colors.lua")

function init_winds()
	if leader then
		if not dont_rename then
			Send("group rename @Y[@x075Winds of Fate@Y]")
		end
	end
	side = 1
	player = ""
	word = ""
	cmd = ""
	side1 = {[1] = {word = "und"}, [2] = {word = "kaje"}, [3] = {word = "exo"}, [4] = {word = "wond"}, [5] = {word = "soberi"}, [6] = {word = "axo"}, [7] = {word = "wangi"}, [8] = {word = "soju"}}
	side2 = {[1] = {word = "pavi"}, [2] = {word = "ilion"}, [3] = {word = "edi"}, [4] = {word = "itor"}, [5] = {word = "shooey"}, [6] = {word = "opti"}, [7] = {word = "haviar"}, [8] = {word = "rochu"}}
	side3 = {[1] = {word = "areo"}, [2] = {word = "lapn"}, [3] = {word = "yzi"}, [4] = {word = "agil"}, [5] = {word = "wantoo"}, [6] = {word = "sevar"}, [7] = {word = "bereth"}, [8] = {word = "embao"}}
	side4 = {[1] = {word = "yli"}, [2] = {word = "etele"}, [3] = {word = "zin"}, [4] = {word = "juja"}, [5] = {word = "quitis"}, [6] = {word = "bevij"}, [7] = {word = "sjisji"}, [8] = {word = "jajar"}}
end

chan = "gtell :"
dupes_chan = ""
winds = tonumber(GetVariable("winds")) or "unknown"
room_info = 1
char_status = 1
group = 1
offer = {}
dupes = {}
this_case = ""
offer_bag = ""
search_list = ""
obelisk_room = "39999" --"39999"
show_missing = tonumber(GetVariable("show_missing")) or 1
dont_rename = false

-- Collector Case
cards1 = {"Alessandrew", "Domain", "Original", "Alhena", "Evie", "Quadrapus", "Androg", "FatesDagger", "Rafaele", "Ani", "Galinthas", "Rau", "Bejito", "Gren", "Rezit", "Blurp", "Hank", "Rocky", "Bonjour", "Hiroki", "Ruiner", "Cadaver", "Jennie", "Saartje", "Cartman", "Leaf", "Speedster", "Chuft", "Linoge", "Stormlord", "Cordelia", "Lumina", "Tirica", "Craven", "Madcatz", "TrEz", "Curi", "Madrox", "Trollemite", "Dagonet", "Majic", "Vanion", "Dave", "Marauder", "Whisper", "Demonspawn", "Marc", "Wojmil", "Dereliction", "Moolb", "Yowza", "Dexter", "Ninja", "Zolstead", "DjVoltron", "Oladon"}
table.sort(cards1) -- sort alphabetically

-- Expansion Case
cards2 = {"Abelinc", "Icecool", "Pumpkin", "Adam", "Iceman", "Razor", "Arist", "Ixultar", "Redryn", "Baktosh", "Koala", "Robbo", "Blug", "Kya", "Rojaz", "Blunt", "Level", "Slith", "Chich", "Liber", "SonRokito", "Corliss", "Mars", "Tinada", "Dachande", "Mendaloth", "Trachx", "Danj", "Milquetoast", "Trurien", "Deadman", "Mique", "Turie", "Delgar", "Mirrim", "Tzitzimime", "Dexx", "Moradin", "Unforgiven", "Edit", "Morn", "Wars", "Erikson", "Nasus", "Whitdjinn", "Fetard", "Nocilis", "Wire", "Fiendish", "Paipals", "Zengo", "Freddie", "Pleiades", "Zoot", "Gastro", "Portia"}
table.sort(cards2) -- sort alphabetically

-- Memorial & IMM Case
cards3 = {"Aisis", "Gangar", "Orsiphantes", "Andersen", "Ghaan", "Pane", "Arius", "Glimmer", "Psychopath", "Arthon", "Halo", "Roell", "Barchetta", "Ikyu", "Sarlock", "Barid", "Jaenelle", "Senja", "Belmont", "Jernau", "ShadowFax", "Breeze", "Juli", "Songbird", "Candace", "Kaitlyn", "Synthesizer", "Cerridwen", "Khelda", "Tallie", "Confusion", "Kinson", "Terrill", "DagasWolf", "Kt", "Thirstan", "Delight", "Lamoxes", "Tripitaka", "Dhamon", "Llarian", "Tyanon", "Dirtworm", "Martin", "Tymme", "Eclaboussure", "Metallica", "Uncival", "Euphonix", "Mordist", "Wolfe", "FieryFlame", "Natallia", "Xantcha", "Filt", "Neeper"}
table.sort(cards3) -- sort alphabetically

-- Original & IMM Case
cards4 = {"Althalus", "Kalince", "Sagen", "Anaristos", "Kharpern", "Sirene", "Baejita", "Korridel", "Skarren", "Banichi", "Laren", "Styliann", "Broud", "Lao", "Sunset", "Cassin", "Lasher", "Sylvain", "Citron", "Maerchyng", "Tela", "Claire", "Marcon", "Tenchi", "Cynic", "Mashai", "Teoyaomqui", "Dadrake", "Methdemon", "Testasterone", "Darkmoore", "Moons", "Timeghost", "Dreamfyre", "Obyron", "Valkur", "Elisa", "OrcWarrior", "Velvet", "Entreri", "Paramore", "Vesuvius", "Fufa", "Penthesilea", "Vilgan", "Geneve", "Pointless", "Vitae", "Guinness", "Pudge", "Xeno", "Harvester", "Rhuli", "Yandros", "JustMe", "Rumour"}
table.sort(cards4) -- sort alphabetically

cases = {}
local pvar = GetVariable("cases") or ""
if pvar ~= "" then
	cases = loadstring("return "..pvar)()
end
local tmp_cards = {}

function toggle_show_missing()
	show_missing = math.abs(show_missing - 1)
	SetVariable("show_missing", show_missing)
	if show_missing == 1 then
		ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "#FBFF00", "", " >> ", "silver", "", "Missing cards will be listed when you identify a case.\n")
	else
		ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "#FBFF00", "", " >> ", "silver", "", "Missing cards will not be listed when you identify a case.\n")
	end
	SaveState()
end

function inventory_dupes(name, line, args)
	dupes_chan = args.chan
	EnableTrigger("start_dupes", true)
	SendNoEcho("echo {winds_dupes}")
	SendNoEcho("invdata ansi")
	SendNoEcho("echo {end_winds_dupes}")
end

function start_dupes()
	dupes = {}
	EnableTriggerGroup("dupes", true)
end

function dupe_card(name, line, args)
	table.insert(dupes, args.name)
end

function end_dupes()
	EnableTriggerGroup("dupes", false)
	local msg = " @x075Winds Duplicates@Y >> "
	table.sort(dupes)
	for i, d in ipairs(dupes) do
		if i > 1 then
			msg = msg.."@D, "
		end
		msg = msg.."@W"..d
	end
	Send(dupes_chan.." "..msg.."$C")
end

function in_table(t, val)
	for _, v in ipairs(t) do
		if string.lower(v) == string.lower(val) then
			return true
		end
	end
	return false
end

function start_case()
	EnableTriggerGroup("case", true)
	tmp_cards = {}
end

function case_card(name, line, args)
	tmp_cards[args.card] = 1
end

function total_case(name, line, args)
	local cards
	for card, _ in pairs(tmp_cards) do
		if in_table(cards1, card) then
			cards = cards1
		elseif in_table(cards2, card) then
			cards = cards2
		elseif in_table(cards3, card) then
			cards = cards3
		elseif in_table(cards4, card) then
			cards = cards4
		end
	end
	ColourTell("red", "", "\nMissing:", "yellow", "", " "..(#cards - args.tot).." ")
	if show_missing == 1 then
		local cnt = 0
		for i, card in ipairs(cards) do
			if not tmp_cards[card] then
				cnt = cnt + 1
				if cnt > 1 then
					ColourTell("gray", "", ", ")
				end
				--if cnt % 9 == 0 then
					--Note("")
				--end
				ColourTell("silver", "", card)
			end
		end
	end
	Note("")
end

function end_case(name, line, args)
	this_case = args.case
	cases[this_case] = tmp_cards
	tmp_cards = {}
	SaveState()
	EnableTriggerGroup("case", false)
	this_case = ""
end

function winds_scratch(name, line, args)
	local rslt = 0
	if args.rslt == "y" then
		rslt = 1
	end
	for i = 1, 4 do
		local t = _G["side"..i]
		for k, v in ipairs(t) do
			if v.word == args.word then
				v.result = rslt
				if rslt == 0 then
					ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "#FBFF00", "", " >> ", "silver", "", "Manually scratching ", "white", "", args.word, "silver", "", " from side "..i.."!\n")
				else
					ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "#FBFF00", "", " >> ", "silver", "", "Manually accepting ", "white", "", args.word, "silver", "", " for side "..i.."!\n")
				end
				report(i)
				go_try()
				return
			end
		end
	end
	local xy = {["y"] = "accept", ["x"] = "scratch"}
	ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "#FBFF00", "", " >> ", "silver", "", "Invalid word to "..xy[args.rslt]..": ", "white", "", args.word.."\n")
end

function set_cmd(name, line, args)
	cmd = args.cmd
	ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "silver", "", " command is ", "white", "", cmd, "silver", "", ". Type ", "yellow", "", "cmd", "silver", "", " to use it!\n")
	EnableAlias("cmd", true)
end

function set_cmd_crowley(name, line, args)
	local c = "stand pedestal"
	for w in string.gmatch(args.done, "%a+") do
		c = c..";say "..w
	end
	for w in string.gmatch(args.left, "%a+") do
		c = c..";say "..w
		cmd = c
		ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "silver", "", " command is ", "white", "", cmd, "silver", "", ". Type ", "yellow", "", "cmd", "silver", "", " to use it!\n")
		EnableAlias("cmd", true)
		return
	end
	
end

function use_cmd()
	if cmd ~= "" then
		for c in string.gmatch(cmd, "[^;]+") do
			Send(c)
		end
		cmd = ""
	end
end

function got_pebble(name, line, args)
	if not sitter then
		return
	end
	local msg = chan.."@Y>> @x075Winds of Fate @Y>> @wPebble was given to @W"..args.who..args.m..args.e.."@w.$C"
	Send(msg)
		--ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "#FBFF00", "", " >> ", "silver", "", "Pebble was given to ", "white", "", args.who, "silver", "", ".\n")
end

function enable_time_catch()
	EnableTrigger("winds_time_catch", true)
end

function winds_timer(name, line, args)
	EnableTrigger("winds_time_catch", false)
	local now = os.time()
	local at = os.time() + args.hours * 60 * 60 + args.mins * 60 + args.secs
	winds = at
	SaveState()
	DoAfterSpecial(.2, "report_winds()", 12)
end

function report_sides()
	report(side)
end

function report_winds()
	if winds == "unknown" then
		ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "silver", "", " cooldown is ", "white", "", winds, "silver", "", ".\n")
	elseif winds > os.time() then
		ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "silver", "", " is available on ", "white", "", os.date("%A at %I:%M:%S %p", winds), "silver", "", ".\n")
	elseif winds < os.time() then
		ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "silver", "", " is available ", "white", "", "now", "silver", "", "!", "gray", "", " ("..os.date("%A at %I:%M:%S %p", winds)..")\n")
	elseif os.date("%m%d%Y", winds) == os.date("%m%d%Y", os.time()) then
		ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "silver", "", " is available ", "white", "", os.date("Today at %I:%M:%S %p", winds), "silver", "", ".\n")
	end
end

function player_pedestal(name, line, args)
	player = args.player
	if cmd ~= "" then
		ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "white", "", " cmd ", "silver", "", " cleared out because ", "white", "", player, "silver", "", " used it.\n")
		cmd = ""
	end
	--local match = "(.+ )?"..player.." says '\\s*(?<word>\\w+)\\s*'"
	--SetTriggerOption("player_says", "match", match)
end

function player_says(name, line, args)
	word = args.word
end

function rename_group()
	if not leader then
		return
	end
	local g = ""
	for i = 1, 4 do
		local t = _G["side"..i]
		for k, v in ipairs(t) do
			if v.result == 1 then
				if i > 1 then
					g = g.."@D|"
				end
				g = g.."@G"..v.word
			end
		end
	end
	Send("group rename "..g)
	dont_rename = true
end

function say_result(name, line, args)
	local rslt
	if args.portal == "portal" then
		-- all done, guessed 4th word
		--SetTriggerOption("player_says", "match", "this is set by function")
		if sitter then
			Send(chan.."@Y>> @x075Winds of Fate @Y>> @Wside@D[@x0754@D] @Wis @G"..word.."$C")
			side = 4
			Send(chan.."@Y>> @x075Winds of Fate @Y>> @WObelisk sides done!$C")
		end
		room_info.zone = "" -- let it rename group by fudging last zone
		init_winds()
		return
	elseif args.different == "different" then
		rslt = 1
	elseif args.bolt == "bolt" then
		rslt = 0
	end
	for i = 1, 4 do
		local t = _G["side"..i]
		for k, v in ipairs(t) do
			if v.word == word then
				local show = false
				if not v.result then
					show = true
				end
				if side == i or rslt == 1 then -- only scratch a word if we know the side matches
					v.result = rslt
				else
					if sitter then
						Send(chan.."@Y>> @x075Winds of Fate @Y>> @wNot setting result for @W"..word.."@w because it is not on @Wside@D[@x075"..side.."@D]@w.$C")
					end
				end
				if rslt == 1 then
					side = i+1
					if sitter then
						if not show then
							return
						end
						Send(chan.."@Y>> @x075Winds of Fate @Y>> @Wside@D[@x075"..i.."@D] @Wis @G"..word.."$C")
						rename_group()
						report(side)
					end
				else
					if sitter then
						if not show then
							return
						end
						report(side)
						go_try()
					end
				end
				return
			end
		end
	end
	if sitter then
		Send(chan.."@Y>> @x075Winds of Fate @Y>> @WInvalid word submitted: @R"..word.."$C")
		report(side)
		go_try()
	end
end

function sitting()
	if char_status == 1 then
		if gmcp then
			char_status = gmcp("char.status")
		else
			-- legacy gmcp handler
			any, p = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "char.status")
			char_status = loadstring("return "..p)()
		end
	end
	if char_status.state ~= "11" then
		return false
	end
	return true
end

function report(s)
	if not sitter then
		return false
	end
	
	local msg = chan.."@Y>> @x075Winds of Fate @Y>> @Wside@D[@x075"..s.."@D] "
	
	local t = _G["side"..s]
	for k, v in ipairs(t) do
		if k > 1 then
			msg = msg.."@D, "
		end
		if not v.result then
			msg = msg.."@w"
		elseif v.result == 0 then
			msg = msg.."@R"
		elseif v.result == 1 then
			msg = msg.."@G"
		end
		msg = msg..v.word
	end
	Send(msg)
end

function side_result(s)
	--Note("get side "..s)
	local rtn = ""
	local t = _G["side"..s]
	for k, v in ipairs(t) do
		if not v.result and rtn == "" then
			rtn = "say "..v.word
		elseif v.result and v.result == 1 then
			rtn = "say "..v.word
		end
	end
	return rtn
end

function go_try()
	if not sitter then
		return false
	end
	local msg = chan.."@Y>> @x075Winds of Fate @Y>> @x075[[  @Wstand on pedestal;"
	for i = 1, 4 do
		if i <= side then
			local rslt = side_result(i)
			if i > 1 then
				msg = msg..";"
			end
			msg = msg..rslt
		end
	end
	msg = msg.."  @x075]]"
	SendNoEcho(msg)
end

function OnPluginSaveState()
	SetVariable("winds", winds)
	SetVariable("cases", serialize.save_simple(cases))
end

function OnPluginBroadcast (msg, id, name, text)
	if id == "3e7dedbe37e44942dd46d264" then
		if text == "room.info" then
			if gmcp then
				room_info = gmcp("room.info")
			else
				-- legacy gmcp handler
				any, p = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "room.info")
				room_info = loadstring("return "..p)()
			end
			if room_info.zone == "winds" then
				--DebugNote({"in winds zone"})
				EnableTriggerGroup("triggers", true)
				if last_zone ~= "winds" then
					--DebugNote({"last zone was not winds"})
					init_winds()
				else
					--DebugNote({"last zone was winds, so did not try to init"})
				end
			else
				EnableTriggerGroup("triggers", false)
			end
			last_room = room_info.num
			last_zone = room_info.zone
		end
		if text == "char.status" then
			if gmcp then
				char_status = gmcp("char.status")
			else
				-- legacy gmcp handler
				any, p = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "char.status")
				char_status = loadstring("return "..p)()
			end
			if char_status.state == "11" then
				if room_info == 1 then
					if gmcp then
						room_info = gmcp("room.info")
					else
						-- legacy gmcp handler
						any, p = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "room.info")
						room_info = loadstring("return "..p)()
					end
				end
				if room_info.num == obelisk_room then
					if not sitter then
						sitter = true
						go_try()
					end
				end
			else
				sitter = false
			end
		end
		if text == "group" then
			if gmcp then
				--DebugNote({"updated handler - getting group info"})
				group = gmcp("group")
				if group.leader == gmcp("char.base.name") then
					leader = true
				else
					leader = false
				end
			else
				-- legacy gmcp handler
				--DebugNote({"legacy handler - getting group info"})
				any, p = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "group")
				group = loadstring("return "..p)()
				any, p = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", "char.base.name")
				if group.leader == p then
					--DebugNote({"leader: ", group.leader, " me: ", p})
					--DebugNote({"I am leader"})
					leader = true
				else
					--DebugNote({"leader: ", group.leader, " me: ", p})
					--DebugNote({"I am not leader"})
					leader = false
				end
			end
			--DebugNote({"leader: ", tostring(leader)})
		end
	end
end

function DebugNote(args)
	Note(table.concat(args, ","))
end

function loaded()
	ColourNote("#FBFF00", "", "\n >> ", "#9AC7FE", "", "Winds of Fate", "silver", "", " plugin loaded. Submit ", "yellow", "", "winds help", "silver", "", " to see commands.\n")
end

EnableTriggerGroup("triggers", false)
init_winds()
DoAfterSpecial(.2, "loaded()", 12)

]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="winds help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
	Note("")
	ColourNote("white", "", "The ", "#9AC7FE", "", "Winds of Fate", "white", "", " Plugin was made to track sides of the monolithic obelisk.")
	ColourNote("white", "", "It will also remember cooldown timer, show what cards are missing from a case,")
	ColourNote("white", "", "rename the group (if leader), and announce who gets the pebble.  It will also")
	ColourNote("white", "", "give other users the alias '", "yellow", "", "cmd", "white", "", "' for guessing sides.")
	ColourNote("white", "", "In order to be the announcer, you need to ", "yellow", "", "sit", "white", "", " in the obelisk room.")
	Note("")
	ColourNote("yellow", "", "winds                                          ", "#9AC7FE", "", "Shows epic cooldown if known.")
	Note("")
	ColourNote("yellow", "", "winds x <word>                                 ", "#9AC7FE", "", "Manually scratch a word.")
	Note("")
	ColourNote("yellow", "", "winds y <word>                                 ", "#9AC7FE", "", "Manually accept a word.")
	Note("")
	ColourNote("yellow", "", "rep[ort]sides                                  ", "#9AC7FE", "", "Report current status for guessing words.")
	Note("")
	ColourNote("yellow", "", "winds missing                                  ", "#9AC7FE", "", "Toggle missing cards when you identify a case.")
	Note("")
	ColourNote("yellow", "", "cmd                                            ", "#9AC7FE", "", "Use the alias after it is set.")
	ColourNote("white", "", "                                                 * The alias will clear out if you are ")
	ColourNote("white", "", "                                                   in the room when it is used.")
	Note("")
end
]]>
</script>
</muclient>
